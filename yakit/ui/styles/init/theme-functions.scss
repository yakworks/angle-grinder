/* ---------------------------------------------------------------------- */
/*
/*
/* ---------------------------------------------------------------------- */
@use "sass:map";
@use "sass:color";
@use "../tools/util";
// @use "sass:math";
// @use "sass:string";
// @use "sass:list";
// @use "../tools/cssVars";
// @use "../tools/stringify";


$color-var-prefix: --color;

@function theme-color($key: 'primary', $variant: 'base') {
  @if not util.isTruthy($variant) {
    $variant: 'base';
  }
  $mapVals: map.get($theme-colors, $key);
  $_: util.validate($mapVals, "$theme-colors key:#{$key} not found");

  $color: map.get($mapVals, $variant);
  $_: util.validate($color, "$theme-colors key:#{$key} no [#{$variant}] key");
  @return $color;
}

@function theme-shade($key) {
  $key: 'shade' + '-' + $key;
  $color: map.get($theme-shades, $key);
  $_: util.validate($color, "$theme-shades [#{$key}] not found");
  @return $color;
}

@function colorVar($args...) {
  $str: $color-var-prefix;
  @each $arg in $args {
    @if util.isTruthy($arg){

      $str: $str + '-' + $arg;
    }
  }
  @return $str;
}

@function cvar($key, $kind: '') {
  //if it starts with -- then just return it
  @if str-index($key, "--") == 1 {
    @return var(#{$key});
  }
  // use theme-shade and theme-color to run the validations
  @if $key == shade {
    $_: theme-shade($kind);
  } @else {
    $_: theme-color($key, $kind);
  }

  $css-var: colorVar($key, $kind);
  @return unquote("var(#{$css-var})");
}

@function getContrastColor($color) {
  @if (colorLuminance($color) > 0.55) {
    @return --color-black;
  } @else {
    @return --color-white;
  }
}
// kicks out the css variable declaration and will track it so if we do any
// trickery such as color change we can warn if we dont have it registered
@mixin declareCssVar($varName, $value) {
  #{$varName}: #{$value};
}

// define HSL color variables with --color- prepended. one for each hsl var too.
@mixin declareColorVar($varName, $color) {
  $colorVarName: colorVar($varName);
  @if type-of($color) == 'color' {
    $hue: util.replace(#{hue($color)}, 'deg');
    $saturation: saturation($color);
    $lightness: color.lightness($color);
    $alpha: color.alpha($color);
    @if $alpha < 1 {
      #{$colorVarName}: unquote("hsla(#{$hue}, #{$saturation}, #{$lightness}, #{$alpha})");
      #{$colorVarName}-a: #{$alpha};
    } @else {
      #{$colorVarName}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");
    }
    #{$colorVarName}-h: #{$hue};
    #{$colorVarName}-s: #{$saturation};
    #{$colorVarName}-l: #{$lightness};
  } @else {
    #{$colorVarName}: var(#{$color});
  }

}
